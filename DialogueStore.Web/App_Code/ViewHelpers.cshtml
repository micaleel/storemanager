@using DialogueStore.Web.Infrastructure
@using DialogueStore.Web.Models
@using System.Web.Mvc

@helper PageHeader(string title) {
    <h2 class="page-header">@title</h2>
}

@helper PageHeader(string title, string subtitle) {
    <h2 class="page-header">@title <small>@subtitle</small></h2>
}

@functions
{
    public static string FriendlyDate(DateTime d)
    {
        var s = DateTime.Now.Subtract(d);
        var dayDiff = (int)s.TotalDays;
        var secDiff = (int)s.TotalSeconds;

        if (dayDiff < 0 || dayDiff >= 31) return null;

        if (dayDiff == 0)
        {
            if (secDiff < 60) return "just now";
            if (secDiff < 120) return "1 minute ago";
            if (secDiff < 3600) return string.Format("{0} minutes ago", Math.Floor((double)secDiff / 60));
            if (secDiff < 7200) return "1 hour ago";
            if (secDiff < 86400) return string.Format("{0} hours ago", Math.Floor((double)secDiff / 3600));
        }

        if (dayDiff == 1) return "yesterday";
        if (dayDiff < 7) return string.Format("{0} days ago", dayDiff);

        return dayDiff < 31
            ? string.Format("{0} weeks ago", Math.Ceiling((double)dayDiff / 7))
            : null;
    }

    public static string FormatCurrency(decimal amount)
    {
        return amount.ToString("c");
    }

    public static string FormatDate(DateTime date)
    {
        return date.ToString("dd-MMM-yyyy");
    }

    public static string FormatDate(DateTime? date, string text)
    {
        return date.HasValue ? date.Value.ToString("dd-MMM-yyyy") : text;
    }

    public static string HighlightStockItem(DialogueStore.Web.Models.Stock item) {
        if (item.IsParent) {
            return "success";
        }

        return item.IsExpired ? "warning" : string.Empty;
    }

    public static int GetExpiredItemCount(IEnumerable<DialogueStore.Web.Models.Stock> items) {
        return items == null ? 0 : items.Count(z => z.IsExpired);
    }

    public static DialogueStoreSettings GetAppSettings()
    {
        return (DialogueStoreSettings)HttpContext.Current.Application["AppSettings"];
    }

    public static string FriendlyLoginName()
    {
        var identity = HttpContext.Current.User.Identity as FormsIdentity;
        return identity != null ? identity.Ticket.UserData.Split('|')[1] : string.Empty;
    }

    public static string GetSubjectDisplayName(TimelineActivity activity, string currentUserName)
    {
        return activity.SubjectName == currentUserName ? "You" : activity.SubjectDescriptor;
    }


    public static IEnumerable<System.Web.Mvc.SelectListItem> EndocrinologyReproductiveOptions()
    {
        return new List<System.Web.Mvc.SelectListItem> { 
            new System.Web.Mvc.SelectListItem { Text = "Follicular Phase", Value = "Follicular Phase" }, 
            new System.Web.Mvc.SelectListItem { Text = "Midcycle", Value = "Midcycle" } };
    }

    public static IEnumerable<System.Web.Mvc.SelectListItem> EndocrinologyUnitOptions()
    {
        return new List<System.Web.Mvc.SelectListItem> { 
            new System.Web.Mvc.SelectListItem { Text = "ng/ml", Value = "ng/ml" }, 
            new System.Web.Mvc.SelectListItem { Text = "miu/ml", Value = "miu/ml" }, 
            new System.Web.Mvc.SelectListItem { Text = "miu/l", Value = "miu/l" }, 
            new System.Web.Mvc.SelectListItem { Text = "Ug/dl", Value = "Ug/dl" },
            new System.Web.Mvc.SelectListItem { Text = "iui/l", Value = "iui/l" },
            new System.Web.Mvc.SelectListItem { Text = "Uiu/ml", Value = "Uiu/ml" } };
    }


    public static IEnumerable<System.Web.Mvc.SelectListItem> RoutinePregnancyTestOptions()
    {
        return new List<System.Web.Mvc.SelectListItem> { 
            new System.Web.Mvc.SelectListItem { Text = "Neg", Value = "Neg" }, 
            new System.Web.Mvc.SelectListItem { Text = "Pos", Value = "Pos" } };
    }

    public static IEnumerable<System.Web.Mvc.SelectListItem> RoutineUrineOptions()
    {
        return new List<System.Web.Mvc.SelectListItem> { 
            new System.Web.Mvc.SelectListItem { Text = "Neg", Value = "Neg" }, 
            new System.Web.Mvc.SelectListItem { Text = "Pos", Value = "Pos" },
            new System.Web.Mvc.SelectListItem { Text = "Normal", Value = "Normal" } };
    }

    public static IEnumerable<System.Web.Mvc.SelectListItem> RoutinePhOptions()
    {
        return new List<System.Web.Mvc.SelectListItem> { 
            new System.Web.Mvc.SelectListItem { Text = "5", Value = "5" }, 
            new System.Web.Mvc.SelectListItem { Text = "6", Value = "6" },
            new System.Web.Mvc.SelectListItem { Text = "7", Value = "7" },
            new System.Web.Mvc.SelectListItem { Text = "8", Value = "8" },
            new System.Web.Mvc.SelectListItem { Text = ".", Value = "." } };
    }

    public static IEnumerable<System.Web.Mvc.SelectListItem> RoutineUnitOptions()
    {
        return new List<System.Web.Mvc.SelectListItem> { 
            new System.Web.Mvc.SelectListItem { Text = "mmul/ml", Value = "mmul/ml" }, 
            new System.Web.Mvc.SelectListItem { Text = "iu/l", Value = "iu/l" }, 
            new System.Web.Mvc.SelectListItem { Text = "g/l", Value = "g/l" }, 
            new System.Web.Mvc.SelectListItem { Text = "mg/dl", Value = "mg/dl" },
            new System.Web.Mvc.SelectListItem { Text = "umdl/l", Value = "umdl/l" },
            new System.Web.Mvc.SelectListItem { Text = "ml/mm", Value = "ml/mm" },
            new System.Web.Mvc.SelectListItem { Text = "g/24hrs", Value = "g/24hrs" },
            new System.Web.Mvc.SelectListItem { Text = "mmd/24hrs", Value = "mmd/24hrs" },
            new System.Web.Mvc.SelectListItem { Text = "pg/l", Value = "pg/l" } };
    } 

}

@helper EchoTimelineActivity(UrlHelper url, TimelineActivity activity)
{
    <p style="border-bottom: 1px gainsboro dotted; padding-bottom: .5em;">
        <i class="glyphicon glyphicon-time"></i>&nbsp;
        <span>@GetSubjectDisplayName(activity, User.Identity.Name)</span>
        <span>@activity.Verb</span>
        <span><a href="@url.ObjectLinkFor(activity)">@activity.ObjectDescriptor</a></span>
        <span class="text-muted pull-right"><small>@activity.Date.Ago()</small></span>
    </p>
}




@helper ShowExpiredItemsWarninig() {
    int expiredItemsCount = GetExpiredItemCount(Model);
    if (expiredItemsCount > 0) {
    <div class="row">
        <div class="alert alert-danger alert-dismissable">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <strong>Warning!</strong> there are @expiredItemsCount stock items that have expired.
        </div>
    </div>
    }
}