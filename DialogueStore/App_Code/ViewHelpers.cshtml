@using DialogueStore.Infrastructure

@helper PageHeader(string title) {
    <h2 class="page-header">@title</h2>
}

@helper PageHeader(string title, string subtitle) {
    <h2 class="page-header">@title <small>@subtitle</small></h2>
}

@functions
{
    public static string FriendlyLoginName()
    {
        var identity = HttpContext.Current.User.Identity as FormsIdentity;
        return identity != null ? identity.Ticket.UserData.Split('|')[1] : string.Empty;
    }

    public static string FriendlyDate(DateTime d)
    {
        var s = DateTime.Now.Subtract(d);
        var dayDiff = (int)s.TotalDays;
        var secDiff = (int)s.TotalSeconds;

        if (dayDiff < 0 || dayDiff >= 31) return null;

        if (dayDiff == 0)
        {
            if (secDiff < 60) return "just now";
            if (secDiff < 120) return "1 minute ago";
            if (secDiff < 3600) return string.Format("{0} minutes ago", Math.Floor((double)secDiff / 60));
            if (secDiff < 7200) return "1 hour ago";
            if (secDiff < 86400) return string.Format("{0} hours ago", Math.Floor((double)secDiff / 3600));
        }

        if (dayDiff == 1) return "yesterday";
        if (dayDiff < 7) return string.Format("{0} days ago", dayDiff);

        return dayDiff < 31
            ? string.Format("{0} weeks ago", Math.Ceiling((double)dayDiff / 7))
            : null;
    }

    public static string FormatCurrency(decimal amount)
    {
        return amount.ToString("c");
    }

    public static string FormatDate(DateTime date)
    {
        return date.ToString("dd-MMM-yyyy");
    }

    public static string FormatDate(DateTime? date, string text)
    {
        return date.HasValue ? date.Value.ToString("dd-MMM-yyyy") : text;
    }
    
    public static DialogueStoreSettings GetAppSettings()
    {
        return (DialogueStoreSettings)HttpContext.Current.Application["AppSettings"];
    }
    
    public static string ApplicationVersion() {
        return System.Configuration.ConfigurationManager.AppSettings["abufm.app-version"].ToLowerInvariant();
    }

    public static string HighlightStockItem(DialogueStore.Models.Stock item) {
        if (item.IsParent) {
            return "success";
        }

        return item.IsExpired ? "warning" : string.Empty;
    }

    public static int GetExpiredItemCount(IEnumerable<DialogueStore.Models.Stock> items) {
        return items == null ? 0 : items.Count(z => z.IsExpired);
    }
}

@helper ShowExpiredItemsWarninig() {
    int expiredItemsCount = GetExpiredItemCount(Model);
    if (expiredItemsCount > 0) {
    <div class="row">
        <div class="alert alert-danger alert-dismissable">
            <button type="button" class="close" data-dismiss="alert" aria-hidden="true">&times;</button>
            <strong>Warning!</strong> there are @expiredItemsCount stock items that have expired.
        </div>
    </div>
    }
}